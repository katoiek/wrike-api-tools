extends layout

block content
  .row.mb-4
    .col-12
      h1.h3 #{__('userGroups.title')}
      p.text-muted #{__('app.description')}

  if error
    .row
      .col-12
        .alert.alert-danger
          i.bi.bi-exclamation-triangle-fill.me-2
          strong #{__('common.error')}:
          | #{error}
        .card.shadow-sm.mt-4
          .card-body
            h5.card-title #{__('userGroups.accessError')}
            p.card-text #{__('userGroups.accessErrorDescription')}
            a.btn.btn-primary(href="/") #{__('common.backToDashboard')}
  else if error
    .row
      .col-12
        .alert.alert-danger
          i.bi.bi-exclamation-triangle-fill.me-2
          strong #{__('common.error')}:
          | #{error}
        .card.shadow-sm.mt-4
          .card-body
            h5.card-title #{__('userGroups.accessError')}
            p.card-text #{__('userGroups.accessErrorDescription')}
            a.btn.btn-primary(href="/") #{__('common.backToDashboard')}
  else if userGroups && userGroups.length > 0
    .row
      .col-12
        .card.shadow-sm
          .card-body
            .table-responsive
              table.table.table-hover
                thead
                  tr
                    th #{__('userGroups.name')}
                    th #{__('userGroups.totalMembers')}
                    th #{__('userGroups.totalChildGroups')}
                    th.text-end #{__('common.actions')}
                tbody
                  each group in userGroups
                    tr.group-row(data-group-id=group.id)
                      td
                        strong= group.title || group.name
                      td
                        span.members-count= group.memberCount || (group.memberIds ? group.memberIds.length : 0)
                        span.loading-indicator.d-none
                          i.bi.bi-arrow-repeat.spinner-border.spinner-border-sm.me-1
                      td
                        span.childgroups-count= group.childGroupCount || (group.childIds ? group.childIds.length : 0)
                        span.loading-indicator.d-none
                          i.bi.bi-arrow-repeat.spinner-border.spinner-border-sm.me-1
                      td.text-end
                        button.btn.btn-sm.btn-outline-primary.toggle-details(data-group-id=group.id)
                          i.bi.bi-chevron-down.me-1
                          span.action-text #{__('userGroups.expand')}
                    tr.group-details.d-none(data-parent-id=group.id)
                      td(colspan="4")
                        .group-details-content.p-3
                          .loading-container.text-center.py-4
                            .spinner-border.text-primary(role="status")
                              span.visually-hidden Loading...
                            p.mt-2.text-muted #{__('common.loading')}
  else
    .row
      .col-12
        .alert.alert-info
          i.bi.bi-info-circle.me-2
          | #{__('common.noData')}

block scripts
  script.
    document.addEventListener('DOMContentLoaded', function() {
      // Cache for group details to avoid redundant API calls
      const groupDetailsCache = {};

      // Toggle group details
      const toggleButtons = document.querySelectorAll('.toggle-details');
      toggleButtons.forEach(button => {
        button.addEventListener('click', function() {
          const groupId = this.getAttribute('data-group-id');
          const detailsRow = document.querySelector(`.group-details[data-parent-id="${groupId}"]`);
          const groupRow = document.querySelector(`.group-row[data-group-id="${groupId}"]`);

          if (detailsRow.classList.contains('d-none')) {
            // Show details
            detailsRow.classList.remove('d-none');
            this.querySelector('i').classList.remove('bi-chevron-down');
            this.querySelector('i').classList.add('bi-chevron-up');
            this.querySelector('.action-text').textContent = '#{__('userGroups.collapse')}';

            // Load details if not already loaded
            if (!groupDetailsCache[groupId]) {
              loadGroupDetails(groupId, detailsRow, groupRow);
            } else {
              // Use cached data
              console.log(`Using cached data for group ${groupId}`);
              displayGroupDetails(groupId, groupDetailsCache[groupId], detailsRow, groupRow);
            }
          } else {
            // Hide details
            detailsRow.classList.add('d-none');
            this.querySelector('i').classList.remove('bi-chevron-up');
            this.querySelector('i').classList.add('bi-chevron-down');
            this.querySelector('.action-text').textContent = '#{__('userGroups.expand')}';
          }
        });
      });

      // Function to display group details from data
      function displayGroupDetails(groupId, data, detailsRow, groupRow) {
        // Update counts
        const membersCountEl = groupRow.querySelector('.members-count');
        const childGroupsCountEl = groupRow.querySelector('.childgroups-count');

        membersCountEl.textContent = data.members.length;
        childGroupsCountEl.textContent = data.childGroups.length;

        // Generate HTML for details
        const detailsContent = detailsRow.querySelector('.group-details-content');
        let html = '';

        // Child Groups Section
        html += `<h5 class="mb-3">${'#{__('userGroups.childGroups')}'}</h5>`;
        if (data.childGroups && data.childGroups.length > 0) {
          html += '<ul class="list-group mb-4">';
          data.childGroups.forEach(childGroup => {
            // Calculate member count - either from memberIds array or from memberCount property
            const memberCount = childGroup.memberIds ? childGroup.memberIds.length :
                               (childGroup.memberCount || 0);

            html += `
              <li class="list-group-item">
                <div class="d-flex justify-content-between align-items-center">
                  <div>
                    <strong>${childGroup.title || childGroup.name}</strong>
                  </div>
                  <span class="badge bg-primary rounded-pill">${memberCount}</span>
                </div>
              </li>
            `;
          });
          html += '</ul>';
        } else {
          html += `<p class="text-muted">${'#{__('userGroups.noChildGroups')}'}</p>`;
        }

        // Members Section
        html += `<h5 class="mb-3">${'#{__('userGroups.members')}'}</h5>`;
        if (data.members && data.members.length > 0) {
          html += '<ul class="list-group">';
          data.members.forEach(member => {
            // Just display the member ID for now
            const memberId = member.id;

            html += `
              <li class="list-group-item">
                <div class="d-flex justify-content-between align-items-center">
                  <div>
                    <span class="badge bg-secondary me-2">ID</span>
                    ${memberId}
                  </div>
                </div>
              </li>
            `;
          });
          html += '</ul>';
        } else {
          html += `<p class="text-muted">${'#{__('userGroups.noMembers')}'}</p>`;
        }

        // Update the details content
        detailsContent.innerHTML = html;
      }

      // Function to load group details
      function loadGroupDetails(groupId, detailsRow, groupRow) {
        // Show loading indicators
        const membersCountEl = groupRow.querySelector('.members-count');
        const childGroupsCountEl = groupRow.querySelector('.childgroups-count');
        const membersLoadingEl = groupRow.querySelectorAll('.loading-indicator')[0];
        const childGroupsLoadingEl = groupRow.querySelectorAll('.loading-indicator')[1];

        membersLoadingEl.classList.remove('d-none');
        childGroupsLoadingEl.classList.remove('d-none');

        // Fetch group details from API
        fetch(`/api/groups/${groupId}/details`)
          .then(response => {
            if (!response.ok) {
              return response.json().then(errorData => {
                throw new Error(errorData.error || 'Failed to load group details');
              }).catch(() => {
                throw new Error(`Failed to load group details (${response.status})`);
              });
            }
            return response.json();
          })
          .then(data => {
            // Cache the results
            groupDetailsCache[groupId] = data;

            // Hide loading indicators
            membersLoadingEl.classList.add('d-none');
            childGroupsLoadingEl.classList.add('d-none');

            // Display the details
            displayGroupDetails(groupId, data, detailsRow, groupRow);
          })
          .catch(error => {
            console.error('Error loading group details:', error);

            // Hide loading indicators
            membersLoadingEl.classList.add('d-none');
            childGroupsLoadingEl.classList.add('d-none');

            // Show error message
            const detailsContent = detailsRow.querySelector('.group-details-content');
            detailsContent.innerHTML = `
              <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <strong>${'#{__('common.error')}'}</strong>: ${error.message || 'Failed to load group details'}
              </div>
              <div class="mt-3">
                <button class="btn btn-sm btn-outline-secondary retry-button" data-group-id="${groupId}">
                  <i class="bi bi-arrow-clockwise me-1"></i>
                  ${'#{__('common.retry')}'}
                </button>
              </div>
            `;

            // Add retry button functionality
            const retryButton = detailsContent.querySelector('.retry-button');
            if (retryButton) {
              retryButton.addEventListener('click', function() {
                // Replace error message with loading indicator
                detailsContent.innerHTML = `
                  <div class="loading-container text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                      <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2 text-muted">${'#{__('common.loading')}'}</p>
                  </div>
                `;

                // Show loading indicators
                membersLoadingEl.classList.remove('d-none');
                childGroupsLoadingEl.classList.remove('d-none');

                // Try loading again
                loadGroupDetails(groupId, detailsRow, groupRow);
              });
            }
          });
      }
    });

extends layout

block content
  .d-flex.justify-content-between.align-items-center.mb-4
    h1 #{__('folder_blueprints.title')}
    .input-group.w-auto
      input#searchInput.form-control(type="text", placeholder=__('folder_blueprints.search'))
      button.btn.btn-outline-secondary(type="button")
        i.bi.bi-search

  if error
    .alert.alert-danger= error
  else
    .card.shadow-sm
      .card-body
        .mb-3
          button.btn.btn-sm.btn-outline-secondary.me-2#expandAllBtn
            i.bi.bi-arrows-expand.me-1
            | #{__('folder_blueprints.expand_all')}
          button.btn.btn-sm.btn-outline-secondary#collapseAllBtn
            i.bi.bi-arrows-collapse.me-1
            | #{__('folder_blueprints.collapse_all')}

        if folderBlueprints && folderBlueprints.length
          .blueprint-tree
            - const rootNode = folderBlueprints.find(bp => bp.scope === 'BpRoot')
            if rootNode
              - const blueprintMap = {}
              each blueprint in folderBlueprints
                - blueprintMap[blueprint.id] = blueprint

              .blueprint-node.root-node
                .blueprint-header.d-flex.align-items-center(data-id=rootNode.id)
                  i.bi.bi-folder2.me-2.text-primary
                  span.blueprint-title.fw-bold= rootNode.title
                  span.ms-2.text-muted
                    code= rootNode.id

                if rootNode.childIds && rootNode.childIds.length
                  .blueprint-children.ms-4
                    each childId in rootNode.childIds
                      - const childNode = blueprintMap[childId]
                      if childNode
                        +renderBlueprintNode(childNode, blueprintMap, 1)

          //- 検索結果が見つからない場合のメッセージ
          .no-results.d-none.text-center.mt-3
            p.text-muted #{__('folder_blueprints.no_search_results')}
        else
          .text-center
            p.text-muted #{__('folder_blueprints.no_blueprints')}

        //- テーブル表示（検索用に非表示で保持）
        table.d-none#blueprintsTable
          tbody
            if folderBlueprints && folderBlueprints.length
              each blueprint in folderBlueprints
                tr(data-id=blueprint.id)
                  td= blueprint.title || blueprint.name
                  td= blueprint.id

//- ブループリントノードを再帰的にレンダリングするミックスイン
mixin renderBlueprintNode(node, blueprintMap, level)
  .blueprint-node(data-level=level)
    .blueprint-header.d-flex.align-items-center(data-id=node.id)
      if node.childIds && node.childIds.length
        i.bi.bi-caret-right-fill.me-2.toggle-icon(role="button")
      else
        i.bi.bi-dash.me-2.text-muted
      i.bi.bi-folder2.me-2.text-primary
      span.blueprint-title= node.title
      span.ms-2.text-muted
        code= node.id

    if node.childIds && node.childIds.length
      .blueprint-children.ms-4.d-none
        each childId in node.childIds
          - const childNode = blueprintMap[childId]
          if childNode
            +renderBlueprintNode(childNode, blueprintMap, level + 1)

block scripts
  script.
    // 検索機能
    const searchInput = document.getElementById('searchInput');
    const blueprintTree = document.querySelector('.blueprint-tree');
    const noResults = document.querySelector('.no-results');
    const blueprintNodes = document.querySelectorAll('.blueprint-node');
    const blueprintHeaders = document.querySelectorAll('.blueprint-header');
    const hiddenTable = document.getElementById('blueprintsTable');
    const tableRows = hiddenTable ? hiddenTable.querySelectorAll('tr') : [];

    // 検索機能
    searchInput.addEventListener('keyup', function() {
      const searchTerm = this.value.toLowerCase().trim();
      let foundResults = false;

      if (searchTerm === '') {
        // 検索条件がない場合は全て表示
        blueprintNodes.forEach(node => {
          node.classList.remove('d-none');
          node.classList.remove('search-match');
        });

        // ルートノード以外の子ノードは非表示に戻す
        document.querySelectorAll('.blueprint-children').forEach(child => {
          if (!child.closest('.root-node')) {
            child.classList.add('d-none');
          }
        });

        noResults.classList.add('d-none');
        foundResults = true;
      } else {
        // 検索条件がある場合
        const matchingIds = new Set();

        // テーブルの行から検索（非表示のテーブルを使用）
        tableRows.forEach(row => {
          const text = row.textContent.toLowerCase();
          if (text.includes(searchTerm)) {
            matchingIds.add(row.getAttribute('data-id'));
          }
        });

        // 各ノードを検索条件に基づいて表示/非表示
        blueprintNodes.forEach(node => {
          const header = node.querySelector('.blueprint-header');
          const nodeId = header.getAttribute('data-id');

          if (matchingIds.has(nodeId)) {
            node.classList.remove('d-none');
            node.classList.add('search-match');

            // 親ノードも全て表示
            let parent = node.parentElement;
            while (parent) {
              if (parent.classList.contains('blueprint-children')) {
                parent.classList.remove('d-none');
                const parentNode = parent.closest('.blueprint-node');
                if (parentNode) {
                  parentNode.classList.remove('d-none');
                }
              }
              parent = parent.parentElement;
            }

            foundResults = true;
          } else {
            // 検索条件に一致しないノードは、子ノードが一致する場合のみ表示
            const hasMatchingChild = node.querySelector('.search-match');
            if (!hasMatchingChild) {
              node.classList.add('d-none');
            }
          }
        });
      }

      // 検索結果がない場合のメッセージ表示
      if (!foundResults) {
        noResults.classList.remove('d-none');
      } else {
        noResults.classList.add('d-none');
      }
    });

    // フォルダの展開/折りたたみ機能
    // 即時実行関数を使用して、すぐに実行されるようにする
    (function setupFolderToggle() {
      console.log('Setting up folder toggle functionality');

      // すべてのブループリントヘッダーにイベントリスナーを追加
      const headers = document.querySelectorAll('.blueprint-header');
      console.log('Found blueprint headers:', headers.length);

      headers.forEach(header => {
        // 子要素を持つノードのみ処理
        const node = header.closest('.blueprint-node');
        const children = node ? node.querySelector('.blueprint-children') : null;

        if (children) {
          // ヘッダー全体をクリック可能にする
          header.style.cursor = 'pointer';

          // ヘッダーのクリックイベント
          header.addEventListener('click', function(e) {
            // コードやバッジをクリックした場合は展開しない
            if (e.target.tagName === 'CODE' || e.target.classList.contains('badge')) {
              return;
            }

            // 子要素の表示/非表示を切り替え
            children.classList.toggle('d-none');
            console.log('Toggled children visibility:', !children.classList.contains('d-none'));

            // トグルアイコンの切り替え
            const icon = header.querySelector('.toggle-icon');
            if (icon) {
              icon.classList.toggle('bi-caret-right-fill');
              icon.classList.toggle('bi-caret-down-fill');
            }
          });

          // トグルアイコンのクリックイベント
          const toggleIcon = header.querySelector('.toggle-icon');
          if (toggleIcon) {
            toggleIcon.addEventListener('click', function(e) {
              e.stopPropagation(); // イベントの伝播を停止

              // 子要素の表示/非表示を切り替え
              children.classList.toggle('d-none');
              console.log('Toggled children visibility (icon):', !children.classList.contains('d-none'));

              // アイコンの切り替え
              this.classList.toggle('bi-caret-right-fill');
              this.classList.toggle('bi-caret-down-fill');
            });
          }
        }
      });
    })();

    // すべて展開ボタン
    document.getElementById('expandAllBtn').addEventListener('click', function() {
      console.log('Expand all button clicked');

      // すべての子ノードを表示
      document.querySelectorAll('.blueprint-children').forEach(child => {
        child.classList.remove('d-none');
      });

      // すべてのトグルアイコンを下向きに変更
      document.querySelectorAll('.toggle-icon').forEach(icon => {
        icon.classList.remove('bi-caret-right-fill');
        icon.classList.add('bi-caret-down-fill');
      });
    });

    // すべて折りたたむボタン
    document.getElementById('collapseAllBtn').addEventListener('click', function() {
      console.log('Collapse all button clicked');

      // すべての子ノードを取得
      const allChildren = document.querySelectorAll('.blueprint-children');
      console.log('Total children nodes:', allChildren.length);

      // ルートノードの直下の子ノードを特定
      const rootNodeChildren = document.querySelector('.root-node > .blueprint-children');

      // すべての子ノードを非表示にする（ルートノードの直下の子ノードは除く）
      allChildren.forEach(child => {
        // ルートノードの直下の子ノードでない場合は非表示にする
        if (child !== rootNodeChildren) {
          child.classList.add('d-none');
          console.log('Hiding child node:', child);
        } else {
          console.log('Keeping root child visible:', child);
        }
      });

      // すべてのトグルアイコンを右向きに変更
      document.querySelectorAll('.toggle-icon').forEach(icon => {
        icon.classList.add('bi-caret-right-fill');
        icon.classList.remove('bi-caret-down-fill');
      });
    });

    // インラインスタイルを追加
    const styleElement = document.createElement('style');
    styleElement.textContent = `
    .blueprint-tree {
      font-size: 0.95rem;
    }

    .blueprint-node {
      margin-bottom: 0.5rem;
    }

    .blueprint-header {
      padding: 0.5rem;
      border-radius: 4px;
      transition: background-color 0.2s;
    }

    .blueprint-header:hover {
      background-color: rgba(0, 0, 0, 0.05);
    }

    .toggle-icon {
      cursor: pointer;
      transition: transform 0.2s;
    }

    .blueprint-title {
      font-weight: 500;
    }

    .search-match .blueprint-header {
      background-color: rgba(255, 243, 205, 0.5);
    }

    code {
      font-size: 0.8rem;
    }
    `;
    document.head.appendChild(styleElement);

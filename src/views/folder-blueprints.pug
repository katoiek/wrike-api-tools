extends layout

block content
  .d-flex.justify-content-between.align-items-center.mb-4
    h1 #{__('folder_blueprints.title')}
    .input-group.w-auto
      input#searchInput.form-control(type="text", placeholder=__('folder_blueprints.search'))
      button.btn.btn-outline-secondary(type="button")
        i.bi.bi-search

  if error
    .alert.alert-danger= error
  else
    .card.shadow-sm
      .card-body
        .table-responsive
          table.table.table-hover#blueprintsTable
            thead
              tr
                th(onclick="sortTable(0)")
                  | #{__('folder_blueprints.name')}
                  i.bi.bi-arrow-down-up
                th(onclick="sortTable(1)")
                  | #{__('folder_blueprints.id')}
                  i.bi.bi-arrow-down-up
                th(onclick="sortTable(2)")
                  | #{__('folder_blueprints.scope')}
                  i.bi.bi-arrow-down-up
              tr.filters
                th
                  input.form-control.form-control-sm.column-filter(type="text", data-column="0", placeholder=__('folder_blueprints.filter_name'))
                th
                  input.form-control.form-control-sm.column-filter(type="text", data-column="1", placeholder=__('folder_blueprints.filter_id'))
                th
                  input.form-control.form-control-sm.column-filter(type="text", data-column="2", placeholder=__('folder_blueprints.filter_scope'))
            tbody
              if folderBlueprints && folderBlueprints.length
                each blueprint in folderBlueprints
                  tr
                    td= blueprint.title || blueprint.name
                    td
                      code= blueprint.id
                    td= blueprint.scope || '-'
              else
                tr
                  td.text-center(colspan="3") #{__('folder_blueprints.no_blueprints')}

block scripts
  script.
    // フィルター状態を保持する配列
    const filterValues = [
      '', // 名前フィルター
      '', // IDフィルター
      ''  // スコープフィルター
    ];

    // 全体検索の値
    let globalSearchValue = '';

    // テーブルフィルタリング関数
    function filterTable() {
      const table = document.getElementById('blueprintsTable');
      const rows = table.getElementsByTagName('tr');
      const hasFilters = filterValues.some(filter => filter !== '');

      // ヘッダー行とフィルター行をスキップするため、開始インデックスを2に設定
      for (let i = 2; i < rows.length; i++) {
        const cells = rows[i].getElementsByTagName('td');
        if (cells.length) {
          let showRow = true;

          // 各カラムのフィルターを適用
          for (let j = 0; j < filterValues.length; j++) {
            if (filterValues[j] !== '' && cells[j]) {
              const cellText = cells[j].textContent || cells[j].innerText;
              if (cellText.toLowerCase().indexOf(filterValues[j].toLowerCase()) === -1) {
                showRow = false;
                break;
              }
            }
          }

          // グローバル検索を適用
          if (showRow && globalSearchValue !== '') {
            showRow = false;
            for (let j = 0; j < cells.length; j++) {
              const cellText = cells[j].textContent || cells[j].innerText;
              if (cellText.toLowerCase().indexOf(globalSearchValue.toLowerCase()) > -1) {
                showRow = true;
                break;
              }
            }
          }

          rows[i].style.display = showRow ? '' : 'none';
        }
      }
    }

    // グローバル検索機能
    document.getElementById('searchInput').addEventListener('keyup', function() {
      globalSearchValue = this.value.toLowerCase();
      filterTable();
    });

    // カラムフィルター機能
    document.querySelectorAll('.column-filter').forEach(filter => {
      filter.addEventListener('keyup', function() {
        const column = parseInt(this.getAttribute('data-column'));
        filterValues[column] = this.value;
        filterTable();
      });
    });

    // Sorting functionality
    function sortTable(n) {
      let table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
      table = document.getElementById('blueprintsTable');
      switching = true;
      dir = 'asc';

      while (switching) {
        switching = false;
        rows = table.rows;

        // ヘッダー行とフィルター行をスキップするため、開始インデックスを2に設定
        for (i = 2; i < (rows.length - 1); i++) {
          shouldSwitch = false;
          x = rows[i].getElementsByTagName('td')[n];
          y = rows[i + 1].getElementsByTagName('td')[n];

          // 非表示の行はスキップ
          if (rows[i].style.display === 'none' || rows[i + 1].style.display === 'none') {
            continue;
          }

          if (dir === 'asc') {
            if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
              shouldSwitch = true;
              break;
            }
          } else if (dir === 'desc') {
            if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
              shouldSwitch = true;
              break;
            }
          }
        }

        if (shouldSwitch) {
          rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
          switching = true;
          switchcount++;
        } else {
          if (switchcount === 0 && dir === 'asc') {
            dir = 'desc';
            switching = true;
          }
        }
      }
    }extends layout

block content
  .d-flex.justify-content-between.align-items-center.mb-4
    h1 #{__('folder_blueprints.title')}
    .input-group.w-auto
      input#searchInput.form-control(type="text", placeholder=__('folder_blueprints.search'))
      button.btn.btn-outline-secondary(type="button")
        i.bi.bi-search

  if error
    .alert.alert-danger= error
  else
    .card.shadow-sm
      .card-body
        .table-responsive
          table.table.table-hover#blueprintsTable
            thead
              tr
                th(onclick="sortTable(0)")
                  | #{__('folder_blueprints.name')}
                  i.bi.bi-arrow-down-up
                th(onclick="sortTable(1)")
                  | #{__('folder_blueprints.id')}
                  i.bi.bi-arrow-down-up
                th(onclick="sortTable(2)")
                  | #{__('folder_blueprints.scope')}
                  i.bi.bi-arrow-down-up
              tr.filters
                th
                  input.form-control.form-control-sm.column-filter(type="text", data-column="0", placeholder=__('folder_blueprints.filter_name'))
                th
                  input.form-control.form-control-sm.column-filter(type="text", data-column="1", placeholder=__('folder_blueprints.filter_id'))
                th
                  input.form-control.form-control-sm.column-filter(type="text", data-column="2", placeholder=__('folder_blueprints.filter_scope'))
            tbody
              if folderBlueprints && folderBlueprints.length
                each blueprint in folderBlueprints
                  tr
                    td= blueprint.title || blueprint.name
                    td
                      code= blueprint.id
                    td= blueprint.scope || '-'
              else
                tr
                  td.text-center(colspan="3") #{__('folder_blueprints.no_blueprints')}

block scripts
  script.
    // フィルター状態を保持する配列
    const filterValues = [
      '', // 名前フィルター
      '', // IDフィルター
      ''  // スコープフィルター
    ];

    // 全体検索の値
    let globalSearchValue = '';

    // テーブルフィルタリング関数
    function filterTable() {
      const table = document.getElementById('blueprintsTable');
      const rows = table.getElementsByTagName('tr');
      const hasFilters = filterValues.some(filter => filter !== '');

      // ヘッダー行とフィルター行をスキップするため、開始インデックスを2に設定
      for (let i = 2; i < rows.length; i++) {
        const cells = rows[i].getElementsByTagName('td');
        if (cells.length) {
          let showRow = true;

          // 各カラムのフィルターを適用
          for (let j = 0; j < filterValues.length; j++) {
            if (filterValues[j] !== '' && cells[j]) {
              const cellText = cells[j].textContent || cells[j].innerText;
              if (cellText.toLowerCase().indexOf(filterValues[j].toLowerCase()) === -1) {
                showRow = false;
                break;
              }
            }
          }

          // グローバル検索を適用
          if (showRow && globalSearchValue !== '') {
            showRow = false;
            for (let j = 0; j < cells.length; j++) {
              const cellText = cells[j].textContent || cells[j].innerText;
              if (cellText.toLowerCase().indexOf(globalSearchValue.toLowerCase()) > -1) {
                showRow = true;
                break;
              }
            }
          }

          rows[i].style.display = showRow ? '' : 'none';
        }
      }
    }

    // グローバル検索機能
    document.getElementById('searchInput').addEventListener('keyup', function() {
      globalSearchValue = this.value.toLowerCase();
      filterTable();
    });

    // カラムフィルター機能
    document.querySelectorAll('.column-filter').forEach(filter => {
      filter.addEventListener('keyup', function() {
        const column = parseInt(this.getAttribute('data-column'));
        filterValues[column] = this.value;
        filterTable();
      });
    });

    // Sorting functionality
    function sortTable(n) {
      let table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
      table = document.getElementById('blueprintsTable');
      switching = true;
      dir = 'asc';

      while (switching) {
        switching = false;
        rows = table.rows;

        // ヘッダー行とフィルター行をスキップするため、開始インデックスを2に設定
        for (i = 2; i < (rows.length - 1); i++) {
          shouldSwitch = false;
          x = rows[i].getElementsByTagName('td')[n];
          y = rows[i + 1].getElementsByTagName('td')[n];

          // 非表示の行はスキップ
          if (rows[i].style.display === 'none' || rows[i + 1].style.display === 'none') {
            continue;
          }

          if (dir === 'asc') {
            if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
              shouldSwitch = true;
              break;
            }
          } else if (dir === 'desc') {
            if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
              shouldSwitch = true;
              break;
            }
          }
        }

        if (shouldSwitch) {
          rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
          switching = true;
          switchcount++;
        } else {
          if (switchcount === 0 && dir === 'asc') {
            dir = 'desc';
            switching = true;
          }
        }
      }
    }

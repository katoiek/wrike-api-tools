extends layout

block content
  .d-flex.justify-content-between.align-items-center.mb-4
    h1 #{__('folder_blueprints.title')}
    .input-group.w-auto
      input#searchInput.form-control(type="text", placeholder=__('folder_blueprints.search'))
      button.btn.btn-outline-secondary(type="button")
        i.bi.bi-search

  if error
    .alert.alert-danger= error
  else
    .card.shadow-sm
      .card-body
        .mb-3
          button.btn.btn-sm.btn-outline-secondary.me-2#expandAllBtn
            i.bi.bi-arrows-expand.me-1
            | #{__('folder_blueprints.expand_all')}
          button.btn.btn-sm.btn-outline-secondary#collapseAllBtn
            i.bi.bi-arrows-collapse.me-1
            | #{__('folder_blueprints.collapse_all')}

        if folderBlueprints && folderBlueprints.length
          .table-responsive
            table.table.table-hover#blueprintsTable
              thead
                tr
                  th #{__('folder_blueprints.title')}
                  th #{__('folder_blueprints.id')}
              tbody
                - const rootNode = folderBlueprints.find(bp => bp.scope === 'BpRoot')
                if rootNode
                  - const blueprintMap = {}
                  each blueprint in folderBlueprints
                    - blueprintMap[blueprint.id] = blueprint

                  tr.blueprint-node.root-node
                    td.blueprint-header(data-id=rootNode.id)
                      .d-flex.align-items-center
                        i.bi.bi-folder2.me-2.text-primary
                        span.blueprint-title.fw-bold= rootNode.title
                    td
                      code= rootNode.id

                  if rootNode.childIds && rootNode.childIds.length
                    each childId in rootNode.childIds
                      - const childNode = blueprintMap[childId]
                      if childNode
                        +renderBlueprintNode(childNode, blueprintMap, 1)

          //- 検索結果が見つからない場合のメッセージ
          .no-results.d-none.text-center.mt-3
            p.text-muted #{__('folder_blueprints.no_search_results')}
        else
          .text-center
            p.text-muted #{__('folder_blueprints.no_blueprints')}

        //- 検索用に非表示で保持するデータ
        .d-none#hiddenSearchData
          if folderBlueprints && folderBlueprints.length
            each blueprint in folderBlueprints
              div(data-id=blueprint.id, data-title=blueprint.title || blueprint.name)

//- ブループリントノードを再帰的にレンダリングするミックスイン
mixin renderBlueprintNode(node, blueprintMap, level)
  - const hasChildren = node.childIds && node.childIds.length
  tr.blueprint-node(data-level=level, data-id=node.id)
    td.blueprint-header
      .d-flex.align-items-center
        - const indentPadding = level * 20
        div(style=`padding-left: ${indentPadding}px;`)
          if hasChildren
            i.bi.bi-caret-right-fill.me-2.toggle-icon(role="button")
          else
            i.bi.bi-dash.me-2.text-muted
          i.bi.bi-folder2.me-2.text-primary
          span.blueprint-title= node.title
    td
      code= node.id

  if hasChildren
    each childId in node.childIds
      - const childNode = blueprintMap[childId]
      if childNode
        +renderBlueprintNode(childNode, blueprintMap, level + 1)

block scripts
  script.
    // 検索機能
    const searchInput = document.getElementById('searchInput');
    const blueprintsTable = document.getElementById('blueprintsTable');
    const noResults = document.querySelector('.no-results');
    const blueprintNodes = document.querySelectorAll('.blueprint-node');
    const hiddenSearchData = document.getElementById('hiddenSearchData');
    const searchItems = hiddenSearchData ? hiddenSearchData.querySelectorAll('div') : [];

    // 検索機能
    searchInput.addEventListener('keyup', function() {
      const searchTerm = this.value.toLowerCase().trim();
      let foundResults = false;

      if (searchTerm === '') {
        // 検索条件がない場合は全て表示
        blueprintNodes.forEach(node => {
          node.classList.remove('d-none');
          node.classList.remove('search-match');
        });

        // 子ノードは非表示に戻す（レベル1以外）
        document.querySelectorAll('.blueprint-node[data-level]').forEach(node => {
          const level = parseInt(node.getAttribute('data-level'));
          if (level > 1) {
            node.classList.add('d-none');
          }
        });

        noResults.classList.add('d-none');
        foundResults = true;
      } else {
        // 検索条件がある場合
        const matchingIds = new Set();

        // 非表示のデータから検索
        searchItems.forEach(item => {
          const id = item.getAttribute('data-id');
          const title = item.getAttribute('data-title') || '';

          if (id.toLowerCase().includes(searchTerm) || title.toLowerCase().includes(searchTerm)) {
            matchingIds.add(id);
          }
        });

        // 各ノードを検索条件に基づいて表示/非表示
        blueprintNodes.forEach(node => {
          const nodeId = node.getAttribute('data-id');

          if (matchingIds.has(nodeId)) {
            node.classList.remove('d-none');
            node.classList.add('search-match');

            // 親ノードも全て表示
            showParentNodes(node);

            foundResults = true;
          } else {
            // 検索条件に一致しないノードは非表示
            node.classList.add('d-none');
          }
        });
      }

      // 検索結果がない場合のメッセージ表示
      if (!foundResults) {
        noResults.classList.remove('d-none');
      } else {
        noResults.classList.add('d-none');
      }
    });

    // 親ノードを表示する関数
    function showParentNodes(node) {
      const level = parseInt(node.getAttribute('data-level') || '0');
      if (level <= 1) return; // ルートノードまたはレベル1のノードは処理不要

      // 同じレベルの前のノードを探して、親ノードを見つける
      let currentNode = node.previousElementSibling;
      while (currentNode) {
        const currentLevel = parseInt(currentNode.getAttribute('data-level') || '0');
        if (currentLevel < level) {
          // 親ノードを見つけた
          currentNode.classList.remove('d-none');
          showParentNodes(currentNode); // 再帰的に親を表示
          break;
        }
        currentNode = currentNode.previousElementSibling;
      }
    }

    // フォルダの展開/折りたたみ機能
    (function setupFolderToggle() {
      // すべてのトグルアイコンにイベントリスナーを追加
      document.querySelectorAll('.toggle-icon').forEach(icon => {
        icon.addEventListener('click', function(e) {
          e.stopPropagation(); // イベントの伝播を停止

          const node = this.closest('.blueprint-node');
          const nodeId = node.getAttribute('data-id');
          const isExpanded = this.classList.contains('bi-caret-down-fill');

          // アイコンの切り替え
          this.classList.toggle('bi-caret-right-fill');
          this.classList.toggle('bi-caret-down-fill');

          // 子ノードの表示/非表示を切り替え
          toggleChildNodes(nodeId, !isExpanded);
        });
      });

      // ヘッダーのクリックイベント
      document.querySelectorAll('.blueprint-header').forEach(header => {
        header.style.cursor = 'pointer';

        header.addEventListener('click', function(e) {
          // コードをクリックした場合は展開しない
          if (e.target.tagName === 'CODE') {
            return;
          }

          const node = this.closest('.blueprint-node');
          const nodeId = node.getAttribute('data-id');
          const toggleIcon = this.querySelector('.toggle-icon');

          if (toggleIcon) {
            const isExpanded = toggleIcon.classList.contains('bi-caret-down-fill');

            // アイコンの切り替え
            toggleIcon.classList.toggle('bi-caret-right-fill');
            toggleIcon.classList.toggle('bi-caret-down-fill');

            // 子ノードの表示/非表示を切り替え
            toggleChildNodes(nodeId, !isExpanded);
          }
        });
      });
    })();

    // 子ノードの表示/非表示を切り替える関数
    function toggleChildNodes(parentId, show) {
      const level = parseInt(document.querySelector(`.blueprint-node[data-id="${parentId}"]`).getAttribute('data-level'));
      let nextLevel = level + 1;

      // 親ノードの次の要素から順に処理
      let currentNode = document.querySelector(`.blueprint-node[data-id="${parentId}"]`).nextElementSibling;

      while (currentNode) {
        const currentLevel = parseInt(currentNode.getAttribute('data-level') || '0');

        // 親ノードと同じかそれより低いレベルになったら終了
        if (currentLevel <= level) break;

        // 直接の子ノードのみ表示/非表示を切り替え
        if (currentLevel === nextLevel) {
          if (show) {
            currentNode.classList.remove('d-none');
          } else {
            currentNode.classList.add('d-none');

            // 子ノードを非表示にする場合、その子孫も全て非表示にする
            const childId = currentNode.getAttribute('data-id');
            if (childId) {
              const toggleIcon = currentNode.querySelector('.toggle-icon');
              if (toggleIcon && toggleIcon.classList.contains('bi-caret-down-fill')) {
                // 展開されている場合は折りたたむ
                toggleIcon.classList.remove('bi-caret-down-fill');
                toggleIcon.classList.add('bi-caret-right-fill');
              }
            }
          }
        } else if (!show) {
          // 親が非表示の場合、子孫も全て非表示
          currentNode.classList.add('d-none');
        }

        currentNode = currentNode.nextElementSibling;
      }
    }

    // すべて展開ボタン
    document.getElementById('expandAllBtn').addEventListener('click', function() {
      // すべてのノードを表示
      document.querySelectorAll('.blueprint-node').forEach(node => {
        node.classList.remove('d-none');
      });

      // すべてのトグルアイコンを下向きに変更
      document.querySelectorAll('.toggle-icon').forEach(icon => {
        icon.classList.remove('bi-caret-right-fill');
        icon.classList.add('bi-caret-down-fill');
      });
    });

    // すべて折りたたむボタン
    document.getElementById('collapseAllBtn').addEventListener('click', function() {
      // レベル1以外のノードを非表示
      document.querySelectorAll('.blueprint-node[data-level]').forEach(node => {
        const level = parseInt(node.getAttribute('data-level'));
        if (level > 1) {
          node.classList.add('d-none');
        }
      });

      // すべてのトグルアイコンを右向きに変更
      document.querySelectorAll('.toggle-icon').forEach(icon => {
        icon.classList.add('bi-caret-right-fill');
        icon.classList.remove('bi-caret-down-fill');
      });
    });

    // インラインスタイルを追加
    const styleElement = document.createElement('style');
    styleElement.textContent = `
    #blueprintsTable {
      font-size: 0.95rem;
    }

    .blueprint-header {
      padding: 0.5rem;
      transition: background-color 0.2s;
    }

    .blueprint-header:hover {
      background-color: rgba(0, 0, 0, 0.05);
    }

    .toggle-icon {
      cursor: pointer;
      transition: transform 0.2s;
    }

    .blueprint-title {
      font-weight: 500;
    }

    .search-match {
      background-color: rgba(255, 243, 205, 0.5);
    }

    code {
      font-size: 0.8rem;
    }
    `;
    document.head.appendChild(styleElement);

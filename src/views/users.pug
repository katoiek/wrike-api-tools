extends layout

block content
  .row.mb-4
    .col-md-6
      h1.h3 #{__('users.title')}
    .col-md-6.text-end
      .btn-group
        a.btn.btn-outline-primary(href="/users/export")
          i.bi.bi-download.me-1
          | #{getLocale() === 'en' ? 'Export CSV' : 'CSVエクスポート'}

  .row.mb-3
    .col-md-12
      .input-group
        input.form-control#userSearch(type="text", placeholder=getLocale() === 'en' ? 'Search users...' : 'ユーザーを検索...')
        button.btn.btn-primary(type="button")
          i.bi.bi-search

  .card.shadow-sm
    .card-header.bg-light
      .row
        .col-md-6
          h5.mb-0 #{__('users.title')}
        .col-md-6.text-end
          .d-flex.justify-content-end.gap-2
            select.form-select.form-select-sm#emailDomain(style="width: auto;")
              option(value="all") #{getLocale() === 'en' ? 'All domains' : 'すべてのドメイン'}
              option(value="has-email") #{getLocale() === 'en' ? 'Has email' : 'メールあり'}
              option(value="no-email") #{getLocale() === 'en' ? 'No email' : 'メールなし'}
            select.form-select.form-select-sm#userStatus(style="width: auto;")
              option(value="active") #{getLocale() === 'en' ? 'Active only' : 'アクティブのみ'}
              option(value="deleted") #{getLocale() === 'en' ? 'Deleted only' : '削除済みのみ'}
              option(value="all") #{getLocale() === 'en' ? 'Show all' : 'すべて表示'}
            select.form-select.form-select-sm#userSort(style="width: auto;")
              option(value="name") #{getLocale() === 'en' ? 'By name' : '名前順'}
              option(value="id") #{getLocale() === 'en' ? 'By ID' : 'ID順'}
              option(value="email") #{getLocale() === 'en' ? 'By email' : 'メール順'}

    .card-body.p-0
      .table-responsive
        table.table.table-hover.mb-0
          thead.table-light
            tr
              th ID
              th #{__('users.name')}
              th #{__('users.email')}
              th #{getLocale() === 'en' ? 'Status' : 'ステータス'}
              th #{__('users.actions')}
          tbody#userList
            if users && users.length > 0
              each user in users
                tr
                  td
                    code.small #{user.id}
                  td
                    .d-flex.align-items-center
                      if user.avatarUrl
                        img.rounded-circle.me-2(src=user.avatarUrl, width="32", height="32", alt=user.firstName)
                      else
                        .rounded-circle.bg-secondary.text-white.d-flex.align-items-center.justify-content-center.me-2(style="width: 32px; height: 32px;")
                          | #{user.firstName.charAt(0)}#{user.lastName.charAt(0)}
                      span #{user.firstName} #{user.lastName}
                  td= user.email || (getLocale() === 'en' ? 'Not set' : '未設定')
                  td
                    if user.deleted
                      span.badge.bg-danger #{getLocale() === 'en' ? 'Deleted' : '削除済み'}
                    else
                      span.badge.bg-success #{getLocale() === 'en' ? 'Active' : 'アクティブ'}
                  td
                    .btn-group.btn-group-sm
                      a.btn.btn-outline-primary(href=`/users/${user.id}`, title=`ID: ${user.id}`)
                        i.bi.bi-eye
            else
              tr
                td.text-center.py-4(colspan="5") #{getLocale() === 'en' ? 'No users found' : 'ユーザーがありません'}

  if error
    .alert.alert-danger.mt-3= error



block scripts
  script.
    // Variables to store current filters
    let currentSearchTerm = '';
    let currentStatus = 'active'; // Default to active users only
    let currentEmailDomain = 'all'; // Default to all domains
    const currentLocale = document.documentElement.lang || 'en';

    // Function to extract domain from email
    function getDomainFromEmail(email) {
      if (!email || email === (currentLocale === 'en' ? 'Not set' : '未設定')) {
        return null;
      }
      const parts = email.split('@');
      return parts.length === 2 ? parts[1].toLowerCase() : null;
    }

    // Function to get unique domains from all emails
    function getUniqueDomains() {
      const rows = document.querySelectorAll('#userList tr');
      const domains = new Set();

      rows.forEach(row => {
        const emailCell = row.querySelector('td:nth-child(3)');
        if (emailCell) {
          const email = emailCell.textContent.trim();
          const domain = getDomainFromEmail(email);
          if (domain) {
            domains.add(domain);
          }
        }
      });

      return Array.from(domains).sort();
    }

    // Function to populate email domain dropdown
    function populateEmailDomainDropdown() {
      const domains = getUniqueDomains();
      const dropdown = document.getElementById('emailDomain');

      // Keep the first three options (All domains, Has email, and No email)
      const defaultOptions = dropdown.querySelectorAll('option');
      const allDomainsOption = defaultOptions[0];
      const hasEmailOption = defaultOptions[1];
      const noEmailOption = defaultOptions[2];

      // Clear dropdown
      dropdown.innerHTML = '';

      // Add default options back
      dropdown.appendChild(allDomainsOption);
      dropdown.appendChild(hasEmailOption);
      dropdown.appendChild(noEmailOption);

      // Add domain options
      domains.forEach(domain => {
        const option = document.createElement('option');
        option.value = domain;
        option.textContent = domain;
        dropdown.appendChild(option);
      });
    }

    // Function to filter the user list
    function filterUserList() {
      const rows = document.querySelectorAll('#userList tr');
      const searchTerm = currentSearchTerm.toLowerCase();

      rows.forEach(row => {
        const id = row.querySelector('td:nth-child(1)').textContent.toLowerCase();
        const name = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
        const email = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
        const statusCell = row.querySelector('td:nth-child(4)');

        // Check status based on current language
        const activeText = currentLocale === 'en' ? 'Active' : 'アクティブ';
        const deletedText = currentLocale === 'en' ? 'Deleted' : '削除済み';
        const notSetText = currentLocale === 'en' ? 'Not set' : '未設定';

        const isActive = statusCell.textContent.includes(activeText);
        const isDeleted = statusCell.textContent.includes(deletedText);

        // Check email domain
        const domain = getDomainFromEmail(email);
        const hasEmail = !email.includes(notSetText) && domain !== null;
        const matchesEmailDomain =
          (currentEmailDomain === 'all') ||
          (currentEmailDomain === 'has-email' && hasEmail) ||
          (currentEmailDomain === 'no-email' && (email.includes(notSetText) || !domain)) ||
          (domain && domain === currentEmailDomain);

        // Check if row matches all filters
        const matchesSearch = id.includes(searchTerm) || name.includes(searchTerm) || email.includes(searchTerm);
        const matchesStatus =
          (currentStatus === 'all') ||
          (currentStatus === 'active' && isActive) ||
          (currentStatus === 'deleted' && isDeleted);

        if (matchesSearch && matchesStatus && matchesEmailDomain) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });

      // Update the export button to include current filters
      updateExportButton();
    }

    // Function to sort the user list
    function sortUserList(sortBy) {
      const tbody = document.getElementById('userList');
      const rows = Array.from(tbody.querySelectorAll('tr'));

      rows.sort((a, b) => {
        let aValue, bValue;

        switch(sortBy) {
          case 'id':
            aValue = a.querySelector('td:nth-child(1)').textContent;
            bValue = b.querySelector('td:nth-child(1)').textContent;
            return aValue.localeCompare(bValue);

          case 'name':
            aValue = a.querySelector('td:nth-child(2)').textContent;
            bValue = b.querySelector('td:nth-child(2)').textContent;
            return aValue.localeCompare(bValue);

          case 'email':
            aValue = a.querySelector('td:nth-child(3)').textContent;
            bValue = b.querySelector('td:nth-child(3)').textContent;
            return aValue.localeCompare(bValue);

          default:
            return 0;
        }
      });

      // Rebuild the table
      rows.forEach(row => tbody.appendChild(row));
    }

    // Function to update export button with current filters
    function updateExportButton() {
      const exportBtn = document.querySelector('.btn-group a.btn-outline-primary');
      if (!exportBtn) return;

      // Count visible rows
      const visibleRows = Array.from(document.querySelectorAll('#userList tr'))
        .filter(row => row.style.display !== 'none');

      // Update button text with count
      const exportText = currentLocale === 'en' ? 'Export CSV' : 'CSVエクスポート';
      const icon = document.createElement('i');
      icon.className = 'bi bi-download me-1';

      exportBtn.innerHTML = '';
      exportBtn.appendChild(icon);
      exportBtn.appendChild(document.createTextNode(`${exportText} (${visibleRows.length})`));

      // Update href with filter parameters
      const params = new URLSearchParams();
      if (currentSearchTerm) params.append('search', currentSearchTerm);
      if (currentStatus !== 'all') params.append('status', currentStatus);
      if (currentEmailDomain !== 'all') params.append('domain', currentEmailDomain);

      exportBtn.href = `/users/export?${params.toString()}`;
    }

    // Email domain filter functionality
    document.getElementById('emailDomain').addEventListener('change', function(e) {
      currentEmailDomain = e.target.value;
      filterUserList();
    });

    // User search functionality
    document.getElementById('userSearch').addEventListener('input', function(e) {
      currentSearchTerm = e.target.value;
      filterUserList();
    });

    // Status filter functionality
    document.getElementById('userStatus').addEventListener('change', function(e) {
      currentStatus = e.target.value;
      filterUserList();
    });

    // User sort functionality
    document.getElementById('userSort').addEventListener('change', function(e) {
      sortUserList(e.target.value);
    });

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
      // Populate email domain dropdown
      populateEmailDomainDropdown();

      // Default to showing active users only
      filterUserList();

      // Default to sorting by name
      sortUserList('name');

      // Update export button
      updateExportButton();
    });


